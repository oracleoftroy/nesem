#include "text.hpp"

#include <cstdint>

namespace
{ // a box to draw if we can't render the character
	constexpr uint64_t invalid_ch = 0b11111110'10000010'10000010'10000010'10000010'10000010'11111110'00000000;

	// ASCII font
	const std::array<uint64_t, 128> font8 =
		{
			// the first 32 characters are control characters
			invalid_ch, // NUL - Null char
			invalid_ch, // SOH - Start of Heading
			invalid_ch, // STX - Start of Text
			invalid_ch, // ETX - End of Text
			invalid_ch, // EOT - End of Transmission
			invalid_ch, // ENQ - Enquiry
			invalid_ch, // ACK - Acknowledgement
			invalid_ch, // BEL - Bell
			invalid_ch, // BS  - Back Space
			invalid_ch, // HT  - Horizontal Tab
			invalid_ch, // LF  - Line Feed
			invalid_ch, // VT  - Vertical Tab
			invalid_ch, // FF  - Form Feed
			invalid_ch, // CR  - Carriage Return
			invalid_ch, // SO  - Shift Out / X-On
			invalid_ch, // SI  - Shift In / X-Off
			invalid_ch, // DLE - Data Line Escape
			invalid_ch, // DC1 - Device Control 1 (XON)
			invalid_ch, // DC2 - Device Control 2
			invalid_ch, // DC3 - Device Control 3 (XOFF)
			invalid_ch, // DC4 - Device Control 4
			invalid_ch, // NAK - Negative Acknowledgement
			invalid_ch, // SYN - Synchronous Idle
			invalid_ch, // ETB - End of Transmit Block
			invalid_ch, // CAN - Cancel
			invalid_ch, // EM  - End of Medium
			invalid_ch, // SUB - Substitute
			invalid_ch, // ESC - Escape
			invalid_ch, // FS  - File Separator
			invalid_ch, // GS  - Group Separator
			invalid_ch, // RS  - Record Separator
			invalid_ch, // US  - Unit Separator
			0, // ' ' - space
			0b01100000'11110000'11110000'01100000'01100000'00000000'01100000'00000000, // !
			0b01100110'01100110'00000000'00000000'00000000'00000000'00000000'00000000, // "
			0b01101100'01101100'11111110'01101100'11111110'01101100'01101100'00000000, // #
			0b01111100'11010110'11010000'01111000'00010110'11010110'01111100'00000000, // $
			0b00000000'11000110'11001100'00011000'00110000'01100110'11000110'00000000, // %
			0b00111100'01000110'00101100'00011000'01101010'11000100'01111010'00000000, // &
			0b00011000'00011000'00000000'00000000'00000000'00000000'00000000'00000000, // '
			0b00001110'00011000'00110000'00110000'00110000'00011000'00001110'00000000, // (
			0b11100000'00110000'00011000'00011000'00011000'00110000'11100000'00000000, // )
			0b00000000'01100110'00111100'01111110'00111100'01100110'00000000'00000000, // *
			0b00000000'00011000'00011000'01111110'00011000'00011000'00000000'00000000, // +
			0b00110000'00110000'01100000, // ,
			0b00000000'00000000'00000000'01111110'00000000'00000000'00000000'00000000, // -
			0b00110000'00110000'00000000, // .
			0b00000000'00000110'00001100'00011000'00110000'01100000'11000000'00000000, // /
			0b01111100'11000110'11001110'11011110'11110110'11100110'01111100'00000000, // 0
			0b00110000'01110000'00110000'00110000'00110000'00110000'11111100'00000000, // 1
			0b01111100'11000110'00000110'00111100'01100000'11000110'11111110'00000000, // 2
			0b01111100'11000110'00000110'00011100'00000110'11000110'01111100'00000000, // 3
			0b00111100'01101100'11001100'11111110'00001100'00001100'00011110'00000000, // 4
			0b11111110'11000010'11000000'11111100'00000110'11000110'01111100'00000000, // 5
			0b00111100'01100000'11000000'11111100'11000110'11000110'01111100'00000000, // 6
			0b11111110'11000110'00000110'00001100'00011000'00011000'00011000'00000000, // 7
			0b01111100'11000110'11000110'01111100'11000110'11000110'01111100'00000000, // 8
			0b01111100'11000110'11000110'01111110'00000110'00001100'01111000'00000000, // 9
			0b00000000'00000000'00011000'00011000'00000000'00011000'00011000'00000000, // :
			0b00000000'00000000'00011000'00011000'00000000'00011000'00011000'00110000, // ;
			0b00000110'00011100'01110000'11000000'01110000'00011100'00000110'00000000, // <
			0b00000000'00000000'01111110'00000000'01111110'00000000'00000000'00000000, // =
			0b11000000'01110000'00011100'00000110'00011100'01110000'11000000'00000000, // >
			0b01111100'11000110'00000110'00001100'00011000'00000000'00011000'00000000, // ?
			0b01111100'10000110'10011110'10110110'10011100'10000000'01111100'00000000, // @
			0b00111000'01101100'11000110'11111110'11000110'11000110'11000110'00000000, // A
			0b11111100'11000110'11000110'11111100'11000110'11000110'11111100'00000000, // B
			0b00111100'01100110'11000000'11000000'11000000'01100110'00111100'00000000, // C
			0b11111000'11001100'11000110'11000110'11000110'11001100'11111000'00000000, // D
			0b11111110'11000000'11000000'11111000'11000000'11000000'11111110'00000000, // E
			0b11111110'11000000'11000000'11111000'11000000'11000000'11000000'00000000, // F
			0b00111110'01100000'11000000'11001110'11000110'01100110'00111110'00000000, // G
			0b11000110'11000110'11000110'11111110'11000110'11000110'11000110'00000000, // H
			0b11111110'00111000'00111000'00111000'00111000'00111000'11111110'00000000, // I
			0b00011110'00000110'00000110'00000110'11000110'11000110'01111100'00000000, // J
			0b11000110'11001100'11011000'11110000'11011000'11001100'11000110'00000000, // K
			0b11000000'11000000'11000000'11000000'11000000'11000000'11111110'00000000, // L
			0b11000110'11101110'11111110'11010110'11000110'11000110'11000110'00000000, // M
			0b11000110'11100110'11110110'11111110'11011110'11001110'11000110'00000000, // N
			0b01111100'11000110'11000110'11000110'11000110'11000110'01111100'00000000, // O
			0b11111100'11000110'11000110'11111100'11000000'11000000'11000000'00000000, // P
			0b01111100'11000110'11000110'11000110'11010110'11001100'01111010'00000000, // Q
			0b11111100'11000110'11000110'11111100'11011000'11001100'11000110'00000000, // R
			0b01111100'11000110'11000000'01111100'00000110'11000110'01111100'00000000, // S
			0b11111110'00111000'00111000'00111000'00111000'00111000'00111000'00000000, // T
			0b11000110'11000110'11000110'11000110'11000110'11000110'01111100'00000000, // U
			0b11000110'11000110'11000110'11000110'11000110'01101100'00111000'00000000, // V
			0b11000110'11000110'11000110'11010110'11111110'11101110'11000110'00000000, // W
			0b11000110'11000110'01101100'00111000'01101100'11000110'11000110'00000000, // X
			0b11000110'11000110'01101100'00111000'00111000'00111000'00111000'00000000, // Y
			0b11111110'00000110'00001100'00011000'00110000'01100000'11111110'00000000, // Z
			0b00111100'00110000'00110000'00110000'00110000'00110000'00111100'00000000, // [
			0b00000000'11000000'01100000'00110000'00011000'00001100'00000110'00000000, // '\'
			0b01111000'00011000'00011000'00011000'00011000'00011000'01111000'00000000, // ]
			0b00011000'00111100'01100110'00000000'00000000'00000000'00000000'00000000, // ^
			0b00000000'00000000'00000000'00000000'00000000'00000000'11111110'00000000, // _
			0b01100000'00110000'00011000'00000000'00000000'00000000'00000000'00000000, // `
			0b00000000'00000000'01111000'00001100'01111100'11001100'01110110'00000000, // a
			0b11100000'01100000'01100000'01111100'01100110'01100110'11011100'00000000, // b
			0b00000000'00000000'01111000'11001100'11000000'11001100'01111000'00000000, // c
			0b00011100'00001100'00001100'01111100'11001100'11001100'01110110'00000000, // d
			0b00000000'00000000'01111100'11000110'11111110'11000000'01111100'00000000, // e
			0b00111100'01100110'01100000'11110000'01100000'01100000'11110000'00000000, // f
			0b00000000'00000000'01110110'11001100'11001100'01111100'00001100'01111000, // g
			0b11100000'01100000'01100000'01101100'01110110'01100110'11100110'00000000, // h
			0b00011000'00000000'00111000'00011000'00011000'00011000'00111100'00000000, // i
			0b00001100'00000000'00001100'00001100'11001100'11001100'01111000'00000000, // j
			0b11100000'01100000'01100110'01101100'01111000'01101100'11100110'00000000, // k
			0b00111000'00011000'00011000'00011000'00011000'00011000'00111100'00000000, // l
			0b00000000'00000000'01101100'11111110'11010110'11000110'11000110'00000000, // m
			0b00000000'00000000'10111000'11001100'11001100'11001100'11001100'00000000, // n
			0b00000000'00000000'01111000'11001100'11001100'11001100'01111000'00000000, // o
			0b00000000'00000000'11011100'01100110'01111100'01100000'11110000'00000000, // p
			0b00000000'00000000'01110110'11001100'01111100'00001100'00011110'00000000, // q
			0b00000000'00000000'10111100'01100110'01100000'01100000'11110000'00000000, // r
			0b00000000'00000000'01111110'11100000'01111100'00001110'11111100'00000000, // s
			0b00010000'00110000'01111100'00110000'00110000'00110100'00011000'00000000, // t
			0b00000000'00000000'11001100'11001100'11001100'11001100'01110110'00000000, // u
			0b00000000'00000000'11001100'11001100'11001100'01111000'00110000'00000000, // v
			0b00000000'00000000'11000110'11000110'11010110'01111100'01101100'00000000, // w
			0b00000000'00000000'11000110'01101100'00111000'01101100'11000110'00000000, // x
			0b00000000'00000000'11000110'11000110'11000110'01111110'00001100'01111000, // y
			0b00000000'00000000'11111110'10001100'00111000'01100010'11111110'00000000, // z
			0b00011100'00110000'00110000'01100000'00110000'00110000'00011100'00000000, // {
			0b00011000'00011000'00011000'00011000'00011000'00011000'00011000'00000000, // |
			0b01110000'00011000'00011000'00001100'00011000'00011000'01110000'00000000, // }
			0b00000000'00000000'00000000'01110010'10011100'00000000'00000000'00000000, // ~
			invalid_ch, // Delete
	};
}

void draw_char(ui::Canvas &canvas, cm::Color color, char ch, cm::Point2i pos)
{
	uint64_t bits = invalid_ch;

	if (ch >= 0 && ch < ssize(font8))
		bits = font8[ch];

	uint64_t bit = uint64_t(1) << 63;
	for (int row = 0; row < 8; ++row)
	{
		for (int col = 0; col < 8; ++col)
		{
			if (bits & bit)
				canvas.draw_point(color, pos + cm::Point2i{col, row});

			bit >>= 1;
		}
	}
}

void draw_string(ui::Canvas &canvas, cm::Color color, std::string_view text, cm::Point2i pos)
{
	for (char ch : text)
	{
		draw_char(canvas, color, ch, pos);
		pos.x += 8;
	}
}

void draw_string_centered(ui::Canvas &canvas, cm::Color color, std::string_view text, cm::Recti area)
{
	auto text_width = int(text.size() * 8);
	auto string_pos = cm::Point2{area.x + (area.w / 2 - (text_width / 2)), area.y + (area.h / 2 - 4)};

	draw_string(canvas, color, text, string_pos);
}
